// <auto-generated />
using System;
using MedicationMicroservice.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicationMicroservice.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250303151859_InitialCreate5")]
    partial class InitialCreate5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiseaseSubstance", b =>
                {
                    b.Property<Guid>("DiseasesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubstancesId")
                        .HasColumnType("uuid");

                    b.HasKey("DiseasesId", "SubstancesId");

                    b.HasIndex("SubstancesId");

                    b.ToTable("DiseaseSubstance");
                });

            modelBuilder.Entity("DrugSubstance", b =>
                {
                    b.Property<Guid>("DrugsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubstancesId")
                        .HasColumnType("uuid");

                    b.HasKey("DrugsId", "SubstancesId");

                    b.HasIndex("SubstancesId");

                    b.ToTable("DrugSubstance");
                });

            modelBuilder.Entity("MedicationMicroservice.Application.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MedicationMicroservice.Application.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MedicationMicroservice.Application.Models.Substance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubstanceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Substances");
                });

            modelBuilder.Entity("DiseaseSubstance", b =>
                {
                    b.HasOne("MedicationMicroservice.Application.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationMicroservice.Application.Models.Substance", null)
                        .WithMany()
                        .HasForeignKey("SubstancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugSubstance", b =>
                {
                    b.HasOne("MedicationMicroservice.Application.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicationMicroservice.Application.Models.Substance", null)
                        .WithMany()
                        .HasForeignKey("SubstancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
